getSymbols(c('AAPL', 'AMZN', 'FB', 'GOOG', 'MSFT', 'NFLX'),
from = start, to = end, return.class = 'data.frame')
stocks <- bind_cols(AAPL, AMZN, FB, GOOG, MSFT, NFLX) %>%
mutate(date = as.Date(rownames(AAPL)))
rm(AAPL, AMZN, FB, GOOG, MSFT, NFLX)
View(stocks)
gather(stocks,key="stocktype",value="Value",1:36)->n1
separate(n1, stocktype, into=c("stock","type"), sep="\\.")%>%
arrange(date,stock,type)->n2
View(n2)
#and the "tidy" dataframe (date and stock):
spread(stocksLong, key=type, value="Value")->tidy
n2$type=factor(n2$type,levels = c('Open','High','Low','Close','Volume','Adjusted'))
n2%>%
arrange(date,stock,type)->stocksLong
#and the "tidy" dataframe (date and stock):
spread(stocksLong, key=type, value="Value")->tidy
View(tidy)
n= 1:15
A=5000*(1+(11.5/100))^n
A
install.packages("lubridate")
library(lubridate)
knitr::opts_chunk$set(echo = TRUE)
NYC=read_csv('DOHMH_New_York_City_Restaurant_Inspection_Results.csv')
NYC=read_csv('DOHMH_New_York_City_Restaurant_Inspection_Results.csv')
NYC=read_csv('DOHMH_New_York_City_Restaurant_Inspection_Results.csv')
NYC=read_csv('DOHMH_New_York_City_Restaurant_Inspection_Results.csv')
NYC=read_csv('DOHMH_New_York_City_Restaurant_Inspection_Results.csv')
NYC=read.csv('DOHMH_New_York_City_Restaurant_Inspection_Results.csv')
NYC=read_csv('data.csv')
#raw.df <- readr::read_csv("./data.csv")
names(NYC)=gsub(' ', '.', names(NYC))
NYC=read_csv('data.csv')
#raw.df <- readr::read_csv("./data.csv")
names(NYC)=gsub(' ', '.', names(NYC))
View(NYC)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
names(NYC)=gsub(' ', '.', names(NYC))
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)
# 2. Convert the inspection.date column from character to date format.
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))%>%
mutate(month=month(Date))
# 4. Impute the missing values for the 'grade' column
# 5. Rename the description from the action column to something short so it won't blow up your graph.
# 6. We want to filter out missing values to make our lives easier for further analysis.
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
# 8. Unique inspections
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
names(NYC)=gsub(' ', '.', names(NYC))
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)
# 2. Convert the inspection.date column from character to date format.
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))%>%
mutate(month=month(Date))
# 4. Impute the missing values for the 'grade' column
# 5. Rename the description from the action column to something short so it won't blow up your graph.
# 6. We want to filter out missing values to make our lives easier for further analysis.
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
# 8. Unique inspections
class(NYC$month)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
names(NYC)=gsub(' ', '.', names(NYC))
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)
# 2. Convert the inspection.date column from character to date format.
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))%>%
mutate(month=month(Date))
# 4. Impute the missing values for the 'grade' column
# 5. Rename the description from the action column to something short so it won't blow up your graph.
# 6. We want to filter out missing values to make our lives easier for further analysis.
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
# 8. Unique inspections
View(NYC)
View(NYC)
View(NYC)
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))%>%
mutate(month=month(Date))%>%
mutate(MONTH=as.numeric(month))%>%
mutate(Grade=ifelse(is.na(GRADE)=T,"X",GRADE))%>%
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
names(NYC)=gsub(' ', '.', names(NYC))
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)
# 2. Convert the inspection.date column from character to date format.
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))%>%
mutate(month=month(Date))%>%
mutate(month2=as.numeric(month))
# 4. Impute the missing values for the 'grade' column
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))%>%
mutate(month=month(Date))%>%
mutate(month2=as.numeric(month))%>%
mutate(Grade=ifelse(is.na(GRADE)=T,"X",GRADE))
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))%>%
mutate(month=month(Date))%>%
mutate(MONTH=as.numeric(month))%>%
mutate(Grade=ifelse(is.na(GRADE)=T,"X",GRADE))%>%
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))%>%
mutate(month=month(Date))%>%
mutate(MONTH=as.numeric(month))%>%
# mutate(Grade=ifelse(is.na(GRADE)=T,"X",GRADE))%>%
mutate(ifelse(substr(ACTION,1,10)=='Violations','Violations','Other'))%>%
# filter(is.na(NYC)==F)%>%
mutate(Restaraurnts=count(CAMIS)) ->NYC2
NYC%>%
mutate(Restaruants=1)->NYC2
ggplot(NYC2, aes(fill=GRADE, y=Restaraurnts, x=BORO)) +
geom_bar(position="dodge", stat="identity")
NYC%>%
mutate(Restaruants=1)->NYC2
ggplot(NYC2, aes(fill=GRADE, y=Restaraurnts, x=BORO)) +
geom_bar(position="dodge", stat="identity")
NYC%>%
mutate(Restaruants=1)->NYC2
ggplot(NYC2, aes(fill=GRADE, y=Restaruants, x=BORO)) +
geom_bar(position="dodge", stat="identity")
NYC%>%
mutate(Restaruants=1) ->NYC2
ggplot(NYC2, aes(fill=GRADE, y=Restaruants, x=BORO)) +
geom_bar(position="stack", stat="identity")
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Restaruants=1)%>%
#arrange(Cuisine)%>%
mutate(ranking = rank(Cuisine)) %>%
filter(ranking == 20)->NYC2
ggplot(NYC2, aes(fill=Cuisine, y=Restaraurnts, x=GRADE)) +
geom_bar(position="dodge", stat="identity")
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Restaruants=1)%>%
#arrange(Cuisine)%>%
mutate(ranking = rank(Cuisine)) %>%
filter(ranking == 20)->NYC2
ggplot(NYC2, aes(fill=Cuisine, y=Restaruants, x=GRADE)) +
geom_bar(position="dodge", stat="identity")
View(NYC2)
View(NYC)
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Restaruants=1)->nyc2
View(nyc2)
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Restaruants=1)->nyc2
g <- ggplot(data = nyc2, aes(x = BORO, y = SCORE)) + geom_density()
#g + geom_density(aes(x=waiting,col = length))
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Restaruants=1)->nyc2
g <- ggplot(data = nyc2, aes(x = BORO, y = SCORE)) + geom_density()
#g + geom_density(aes(x=waiting,col = length))
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Restaruants=1)->nyc2
g <- ggplot(data = nyc2, aes(x = BORO, y = SCORE)) + geom_density()
#g + geom_density(aes(x=waiting,col = length))
View(nyc2)
View(nyc2)
nyc2%>%
mutate(closed=ifelse(grep("Establishment Closed",ACTION),1,0))%>%
mutate(Inspections=1)#%>%
nyc2%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))%>%
mutate(month=month(Date))
nyc2%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))%>%
mutate(month=month(Date))%>%
group_by(BORO)%>%
summarise(Avg_Score=mean(SCORE))->trend
NYC%>%
rename(Cuisine=CUISINE.DESCRIPTION)%>%
mutate(Restaruants=1)->nyc2
ggplot(data = nyc2, aes(x = BORO, y = SCORE)) + geom_density()
#g + geom_density(aes(x=waiting,col = length))
nyc2%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))%>%
mutate(month=month(Date))%>%
group_by(BORO)%>%
summarise(Avg_Score=mean(SCORE))->trend
ggplot(trend, aes(fill=BORO, y=Avg_Score, x=month)) +
geom_bar(position="stack", stat="identity")
nyc2%>%
mutate(closed=ifelse(grep("Establishment Closed",ACTION),1,0))%>%
mutate(Inspections=1)#%>%
nyc2%>%
mutate(x=grep("Establishment Closed",ACTION))%>%
closed=(ifelse(x=="Establishment Closed",1,0))%>%
mutate(Inspections=1)#%>%
nyc2%>%
mutate(x=grep("Establishment Closed",ACTION))%>%
closed=(ifelse(x="Establishment Closed",1,0))%>%
mutate(Inspections=1)%>%
group_by(BORO)
nyc2%>%
mutate(x=grep("Establishment Closed",ACTION))%>%
closed=(ifelse(x=="Establishment Closed",1,0))%>%
mutate(Inspections=1)%>%
group_by(BORO)
nyc2%>%
mutate(Date = as.Date("INSPECTION.DATE", "%Y/%m/%d"))%>%
mutate(month=month(Date))%>%
group_by(BORO)%>%
summarise(Avg_Score=mean(SCORE))->trend
ggplot(trend, aes(fill=BORO, y=Avg_Score, x=month)) +
geom_bar(position="stack", stat="identity")
nyc2%>%
mutate(a=grep("Establishment Closed",ACTION))%>%
closed=(ifelse(a !=0,1,0))%>%
mutate(Inspections=1)%>%
group_by(BORO)
nyc2%>%
mutate(a=grep("Establishment Closed",ACTION))
library(stringr)
nyc2%>%
mutate(closed=(ifelse(str_detect(ACTION,"Establishment Closed"),1,0))%>%
mutate(Inspections=1)%>%
group_by(BORO)%>%
summarise(closure_ratio=sum(closed)/sum(Inspections))
#mutate(closure_ratio=)
#1grep('a', fruitvec)
library(stringr)
nyc2%>%
mutate(closed=(ifelse(str_detect(ACTION,"Establishment Closed"),1,0))%>%
mutate(Inspections=1)%>%
group_by(BORO)%>%
summarise(closure_ratio=sum(closed)/sum(Inspections))
#mutate(closure_ratio=)
#1grep('a', fruitvec)
nyc2%>%
mutate(closed=(ifelse(str_detect(ACTION,"Establishment Closed"),1,0))
View(nyc2)
View(nyc2)
nyc2%>%
mutate(Inspections=1)
library(stringr)
nyc2%>%
mutate(Inspections=1)%>%
mutate(closed=ifelse(str_detect(ACTION,"Establishment Closed")==TRUE,1,0))%>%
group_by(BORO)%>%
summarise(closure_ratio=sum(closed)/sum(Inspections))
#mutate(closure_ratio=)
#1grep('a', fruitvec)
library(stringr)
nyc2%>%
mutate(Inspections=1)%>%
mutate(closed=ifelse(str_detect(ACTION,"Establishment Closed")==TRUE,1,0))%>%
group_by(BORO)%>%
summarise(closure_ratio=sum(closed)/sum(Inspections))->TEST
#mutate(closure_ratio=)
#1grep('a', fruitvec)
View(TEST)
library(stringr)
nyc2%>%
mutate(Inspections=1)%>%
mutate(closed=ifelse(str_detect(ACTION,"Establishment Closed")==TRUE,1,0))%>%
group_by(BORO)%>%
summarise(closure_ratio=sum(closed)/sum(Inspections))->TEST
#mutate(closure_ratio=)
#1grep('a', fruitvec)
View(TEST)
nyc2%>%
mutate(Inspections=1)%>%
mutate(closed=ifelse(str_detect(ACTION,"Closed")==TRUE,1,0))
nyc2%>%
mutate(Inspections=1)%>%
mutate(closed=ifelse(str_detect(ACTION,"Closed")==TRUE,1,0))%>%
select(Inspections,closed,ACTION)->TEST
View(TEST)
nyc2%>%
mutate(Inspections=1)%>%
mutate(closed=ifelse(str_detect(ACTION,"Closed")==TRUE,1,0))%>%
mutate(closed2=ifelsse(closedis.na,0,closed))
library(stringr)
nyc2%>%
mutate(Inspections=1)%>%
mutate(closed=ifelse(str_detect(ACTION,"Closed")==TRUE,1,0))%>%
mutate(closed2=ifelse(closedis.na,0,closed))
library(stringr)
nyc2%>%
mutate(Inspections=1)%>%
mutate(closed=ifelse(str_detect(ACTION,"Closed")==TRUE,1,0))%>%
mutate(closed2=ifelse(closed is.na,0,closed))
library(stringr)
nyc2%>%
mutate(Inspections=1)%>%
mutate(closed=ifelse(str_detect(ACTION,"Closed")==TRUE,1,0))%>%
group_by(BORO)%>%
summarise(closure_ratio=sum(closed, na.rm = TRUE)/sum(Inspections))->TEST
#mean(x, na.rm = TRUE)
#mutate(closure_ratio=)
#1grep('a', fruitvec)
View(TEST)
library(stringr)
nyc2%>%
mutate(Inspections=1)%>%
mutate(closed=ifelse(str_detect(ACTION,"Closed")==TRUE,1,0))%>%
group_by(BORO)%>%
summarise(closure_ratio=sum(closed, na.rm = TRUE)/sum(Inspections))->TEST
nyc2%>%
mutate(Inspections=1)%>%
mutate(closed=ifelse(str_detect(ACTION,"Closed")==TRUE,1,0))%>%
group_by(DBA)%>%
summarise(closures=sum(closed, na.rm = TRUE))%>%
mutate(closed_plus=ifelse(closures >1,1,0))->test2
#mean(x, na.rm = TRUE)
#mutate(closure_ratio=)
#1grep('a', fruitvec)
View(test2)
View(test2)
library(stringr)
nyc2%>%
mutate(Inspections=1)%>%
mutate(closed=ifelse(str_detect(ACTION,"Closed")==TRUE,1,0))%>%
group_by(BORO)%>%
summarise(closure_ratio=sum(closed, na.rm = TRUE)/sum(Inspections))->TEST
nyc2%>%
mutate(Inspections=1)%>%
mutate(closed=ifelse(str_detect(ACTION,"Closed")==TRUE,1,0))%>%
group_by(DBA)%>%
summarise(closures=sum(closed, na.rm = TRUE))%>%
mutate(closed_plus=ifelse(closures >1,1,0))%>%
ungroup()->test2
#mean(x, na.rm = TRUE)
#mutate(closure_ratio=)
#1grep('a', fruitvec)
View(test2)
data(faithful)
faithful%>%
mutate(length=ifelse(eruptions < 3.2,"short","long"))-> faithful2
g <- ggplot(data = faithful2, aes(x = length, y = waiting))
g + geom_boxplot()
g + geom_density(aes(x=waiting,col = length))
setwd("~/Data Science Bootcamp January/Project 1")
install.packages("tidyerse")
install.packages("rtools")
install.packages("Rtools")
library(dplyr)
library(readr)
library(stringr)
library(tidyr)
library(lubridate)
telco=read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')
View(telco)
telco%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0)%>%
mutate(tenure.decile = cut(tenure, breaks= quantile(tenure,probs= seq(0, 1, by= 0.1)),include.lowest= TRUE, labels= c(1:10)))
telco%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0)%>%
mutate(tenure.decile = cut(tenure, breaks= quantile(tenure,probs= seq(0, 1, by= 0.1)),include.lowest= TRUE, labels= c(1:10)))%>%
group_by(tenure.decile)%>%
summarise(min(tenure), max(tenure), Churn_Rate=mean(Churn2))
telco%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0)%>%
mutate(tenure.decile = cut(tenure,
breaks= quantile(tenure,
probs= seq(0, 1, by= 0.1)),
include.lowest= TRUE, labels= c(1:10))%>%
group_by(tenure.decile)%>%
summarise(min(tenure), max(tenure), Churn_Rate=mean(Churn2))
telco%>%
tenure.decile = cut(tenure,
breaks= quantile(tenure,
probs= seq(0, 1, by= 0.1)),
include.lowest= TRUE, labels= c(1:10))
telco%>%
mutate(tenure.decile = cut(tenure,
breaks= quantile(tenure,
probs= seq(0, 1, by= 0.1)),
include.lowest= TRUE, labels= c(1:10)))
telco%>%
mutate(tenure.decile = cut(tenure,
breaks= quantile(tenure,
probs= seq(0, 1, by= 0.1)),
include.lowest= TRUE, labels= c(1:10)))
telco%>%
mutate(tenure.decile = cut(tenure,
breaks= quantile(tenure,
probs= seq(0, 1, by= 0.1)),
include.lowest= TRUE, labels= c(1:10)))%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0))%>%
telco%>%
mutate(tenure.decile = cut(tenure,
breaks= quantile(tenure,
probs= seq(0, 1, by= 0.1)),
include.lowest= TRUE, labels= c(1:10)))%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0))%>%
group_by(tenure.decile)%>%
summarise(min(tenure), max(tenure), Churn_Rate=mean(Churn2))-> Tenure_Tab
telco%>%
mutate(tenure.decile = cut(tenure,
breaks= quantile(tenure,
probs= seq(0, 1, by= 0.1)),
include.lowest= TRUE, labels= c(1:10)))%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0))%>%
group_by(tenure.decile)%>%
summarise(min(tenure), max(tenure), Churn_Rate=mean(Churn2))-> Tenure_Tab
View(Tenure_Tab)
telco%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0))%>%
summarise(Churn_Rate=mean(Churn2))-> Overall_Churn_Rate
View(Overall_Churn_Rate)
View(Overall_Churn_Rate)
View(Overall_Churn_Rate)
View(Overall_Churn_Rate)
View(Tenure_Tab)
telco%>%
mutate(tenure.decile = cut(tenure,
breaks= quantile(tenure,
probs= seq(0, 1, by= 0.1)),
include.lowest= TRUE, labels= c(1:10)))%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0))%>%
group_by(tenure.decile)%>%
summarise(min(tenure), max(tenure), Churn_Rate=mean(Churn2),
Index=round(mean(Churn2)/0.2653699 * 100))-> Tenure_Tab
View(Tenure_Tab)
telco%>%
mutate(tenure.decile = cut(tenure,
breaks= quantile(tenure,
probs= seq(0, 1, by= 0.1)),
include.lowest= TRUE, labels= c(1:10)))%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0))%>%
group_by(tenure.decile)%>%
summarise(min(tenure), max(tenure), Churn_Rate=mean(Churn2),
Index=round(mean(Churn2)/0.2653699 * 100),
Observations=count(tenure))-> Tenure_Tab
telco%>%
mutate(tenure.decile = cut(tenure,
breaks= quantile(tenure,
probs= seq(0, 1, by= 0.1)),
include.lowest= TRUE, labels= c(1:10)))%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0))%>%
group_by(tenure.decile)%>%
summarise(min(tenure), max(tenure), Churn_Rate=mean(Churn2),
Index=round(mean(Churn2)/0.2653699 * 100),
Observations=n())-> Tenure_Tab
View(Tenure_Tab)
telco%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0))%>%
group_by(InternetService)%>%
summarise(Churn_Rate=mean(Churn2),
Index=round(mean(Churn2)/0.2653699 * 100),
Observations=n())->InternetService
View(InternetService)
View(Tenure_Tab)
telco%>%
mutate(tenure.decile = cut(tenure,
breaks= quantile(tenure,
probs= seq(0, 1, by= 0.1)),
include.lowest= TRUE, labels= c(1:10)))%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0))%>%
group_by(tenure.decile)%>%
summarise(min(tenure), max(tenure), Observations=n(),Churn_Rate=mean(Churn2),
Index=round(mean(Churn2)/0.2653699 * 100),
)-> Tenure_Tab
View(Tenure_Tab)
str(telco)
summary(telco)
telco%>%
mutate(TotalCharges.decile = cut(TotalCharges,
breaks= quantile(TotalCharges,
probs= seq(0, 1, by= 0.1)),
include.lowest= TRUE, labels= c(1:10)))%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0))%>%
group_by(TotalCharges.decile)%>%
summarise(min(TotalCharges), max(TotalCharges), Observations=n(),Churn_Rate=mean(Churn2),
Index=round(mean(Churn2)/0.2653699 * 100),
)-> TotalCharges_Tab
telco%>%
mutate(MonthlyCharges.decile = cut(MonthlyCharges,
breaks= quantile(MonthlyCharges,
probs= seq(0, 1, by= 0.1)),
include.lowest= TRUE, labels= c(1:10)))%>%
mutate(Churn2=ifelse(Churn=='Yes',1,0))%>%
group_by(MonthlyCharges.decile)%>%
summarise(min(MonthlyCharges), max(MonthlyCharges), Observations=n(),Churn_Rate=mean(Churn2),
Index=round(mean(Churn2)/0.2653699 * 100),
)-> MonthlyCharges_Tab
View(MonthlyCharges_Tab)
